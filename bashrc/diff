diff --git a/chrome/browser/extensions/api/serial/serial_api.cc b/chrome/browser/extensions/api/serial/serial_api.cc
index b0e7925..cb8f0b4 100644
--- a/chrome/browser/extensions/api/serial/serial_api.cc
+++ b/chrome/browser/extensions/api/serial/serial_api.cc
@@ -12,6 +12,8 @@
 
 using content::BrowserThread;
 
+namespace serial = extensions::api::serial;
+
 namespace extensions {
 
 const char kConnectionIdKey[] = "connectionId";
@@ -19,6 +21,9 @@ const char kDataKey[] = "data";
 const char kBytesReadKey[] = "bytesRead";
 const char kBytesWrittenKey[] = "bytesWritten";
 const char kBitrateKey[] = "bitrate";
+const char kDataBitKey[] = "dataBit";
+const char kParityKey[] = "parityBit";
+const char kStopBitKey[] = "stopBit";
 const char kSuccessKey[] = "success";
 const char kDcdKey[] = "dcd";
 const char kCtsKey[] = "cts";
@@ -83,7 +88,8 @@ bool SerialGetPortsFunction::Respond() {
 // But we'd like to pick something that has a chance of working, and 9600 is a
 // good balance between popularity and speed. So 9600 it is.
 SerialOpenFunction::SerialOpenFunction()
-    : bitrate_(9600) {
+    : bitrate_(9600), databit_(serial::DATA_BIT_EIGHTBIT),
+      parity_(serial::PARITY_NOPARITY), stopbit_(serial::STOP_BIT_ONESTOPBIT) {
 }
 
 SerialOpenFunction::~SerialOpenFunction() {
@@ -99,6 +105,27 @@ bool SerialOpenFunction::Prepare() {
     scoped_ptr<base::DictionaryValue> options = params_->options->ToValue();
     if (options->HasKey(kBitrateKey))
       EXTENSION_FUNCTION_VALIDATE(options->GetInteger(kBitrateKey, &bitrate_));
+    if (options->HasKey(kDataBitKey)) {
+      std::string data;
+      EXTENSION_FUNCTION_VALIDATE(options->GetString(kDataBitKey, &data));
+      if (!data.empty()) {
+        databit_ = serial::ParseDataBit(data);
+      }
+    }
+    if (options->HasKey(kParityKey)) {
+      std::string parity;
+      EXTENSION_FUNCTION_VALIDATE(options->GetString(kParityKey, &parity));
+      if (!parity.empty()) {
+        parity_ = serial::ParseParity(parity);
+      }
+    }
+    if (options->HasKey(kStopBitKey)) {
+      std::string stopbit;
+      EXTENSION_FUNCTION_VALIDATE(options->GetString(kStopBitKey, &stopbit));
+      if (!stopbit.empty()) {
+        stopbit_ = serial::ParseStopBit(stopbit);
+      }
+    }
   }
 
   return true;
@@ -116,6 +143,9 @@ void SerialOpenFunction::Work() {
     SerialConnection* serial_connection = CreateSerialConnection(
       params_->port,
       bitrate_,
+      databit_,
+      parity_,
+      stopbit_,
       extension_->id());
     CHECK(serial_connection);
     int id = manager_->Add(serial_connection);
@@ -143,8 +173,12 @@ void SerialOpenFunction::Work() {
 SerialConnection* SerialOpenFunction::CreateSerialConnection(
     const std::string& port,
     int bitrate,
+    serial::DataBit databit,
+    serial::Parity parity,
+    serial::StopBit stopbit,
     const std::string& owner_extension_id) {
-  return new SerialConnection(port, bitrate, owner_extension_id);
+  return new SerialConnection(port, bitrate, databit, parity, stopbit,
+      owner_extension_id);
 }
 
 bool SerialOpenFunction::DoesPortExist(const std::string& port) {
diff --git a/chrome/browser/extensions/api/serial/serial_api.h b/chrome/browser/extensions/api/serial/serial_api.h
index cd3a8bb..7eed806 100644
--- a/chrome/browser/extensions/api/serial/serial_api.h
+++ b/chrome/browser/extensions/api/serial/serial_api.h
@@ -13,6 +13,8 @@
 #include "chrome/common/extensions/api/serial.h"
 #include "net/base/io_buffer.h"
 
+namespace serial = extensions::api::serial;
+
 namespace extensions {
 
 class SerialConnection;
@@ -69,12 +71,19 @@ class SerialOpenFunction : public SerialAsyncApiFunction {
   virtual SerialConnection* CreateSerialConnection(
       const std::string& port,
       int bitrate,
+      serial::DataBit databit,
+      serial::Parity parity,
+      serial::StopBit stopbit,
       const std::string& owner_extension_id);
+
   virtual bool DoesPortExist(const std::string& port);
 
  private:
   scoped_ptr<api::serial::Open::Params> params_;
   int bitrate_;
+  api::serial::DataBit databit_;
+  api::serial::Parity parity_;
+  api::serial::StopBit stopbit_;
 };
 
 class SerialCloseFunction : public SerialAsyncApiFunction {
diff --git a/chrome/browser/extensions/api/serial/serial_connection.cc b/chrome/browser/extensions/api/serial/serial_connection.cc
index ffa49b8..ca48b22 100644
--- a/chrome/browser/extensions/api/serial/serial_connection.cc
+++ b/chrome/browser/extensions/api/serial/serial_connection.cc
@@ -10,6 +10,9 @@
 #include "base/lazy_instance.h"
 #include "base/strings/string_util.h"
 #include "chrome/browser/extensions/api/api_resource_manager.h"
+#include "chrome/common/extensions/api/serial.h"
+
+namespace serial = extensions::api::serial;
 
 namespace extensions {
 
@@ -27,8 +30,11 @@ ApiResourceManager<SerialConnection>::GetFactoryInstance() {
 }
 
 SerialConnection::SerialConnection(const std::string& port, int bitrate,
+                                   serial::DataBit databit, serial::Parity parity,
+                                   serial::StopBit stopbit,
                                    const std::string& owner_extension_id)
     : ApiResource(owner_extension_id), port_(port), bitrate_(bitrate),
+      databit_(databit), parity_(parity), stopbit_(stopbit),
       file_(base::kInvalidPlatformFileValue) {
   CHECK_GE(bitrate, 0);
 }
diff --git a/chrome/browser/extensions/api/serial/serial_connection.h b/chrome/browser/extensions/api/serial/serial_connection.h
index 3b838ba..5613825 100644
--- a/chrome/browser/extensions/api/serial/serial_connection.h
+++ b/chrome/browser/extensions/api/serial/serial_connection.h
@@ -12,11 +12,14 @@
 #include "base/platform_file.h"
 #include "chrome/browser/extensions/api/api_resource.h"
 #include "chrome/browser/extensions/api/api_resource_manager.h"
+#include "chrome/common/extensions/api/serial.h"
 #include "content/public/browser/browser_thread.h"
 #include "net/base/io_buffer.h"
 
 using content::BrowserThread;
 
+namespace serial = extensions::api::serial;
+
 namespace extensions {
 
 extern const char kSerialConnectionNotFoundError[];
@@ -25,8 +28,9 @@ extern const char kSerialConnectionNotFoundError[];
 // _win and _posix versions of the the .cc file.
 class SerialConnection : public ApiResource {
  public:
-  SerialConnection(const std::string& port,
-                   int bitrate,
+  SerialConnection(const std::string& port, int bitrate,
+                   serial::DataBit databit, serial::Parity parity,
+                   serial::StopBit stopbit,
                    const std::string& owner_extension_id);
   virtual ~SerialConnection();
 
@@ -71,6 +75,9 @@ class SerialConnection : public ApiResource {
   }
   std::string port_;
   int bitrate_;
+  serial::DataBit databit_;
+  serial::Parity parity_;
+  serial::StopBit stopbit_;
   base::PlatformFile file_;
 };
 
diff --git a/chrome/browser/extensions/api/serial/serial_connection_posix.cc b/chrome/browser/extensions/api/serial/serial_connection_posix.cc
index 25c73e3..8d49d34 100644
--- a/chrome/browser/extensions/api/serial/serial_connection_posix.cc
+++ b/chrome/browser/extensions/api/serial/serial_connection_posix.cc
@@ -101,11 +101,49 @@ bool SerialConnection::PostOpen() {
     cfsetospeed(&options, bitrate_opt_);
   }
 
-  // 8N1
-  options.c_cflag &= ~PARENB;
-  options.c_cflag &= ~CSTOPB;
   options.c_cflag &= ~CSIZE;
-  options.c_cflag |= CS8;
+  switch (databit_) {
+    case serial::DATA_BIT_SEVENBIT: 
+      options.c_cflag |= CS7;
+      break;
+    case serial::DATA_BIT_EIGHTBIT:
+      options.c_cflag |= CS8;
+      break;
+    default:
+      break;
+  }
+  switch (stopbit_) {
+    case serial::STOP_BIT_ONESTOPBIT:
+      options.c_cflag &= ~CSTOPB;
+      break;
+    case serial::STOP_BIT_TWOSTOPBIT:
+      options.c_cflag &= CSTOPB;
+      break;
+    default:
+      break;
+  }
+  // http://pubs.opengroup.org/onlinepubs/009604599/basedefs/termios.h.html
+  switch (parity_) {
+    case serial::PARITY_EVENPARITY:
+      options.c_cflag &= PARENB;
+      break;
+    case serial::PARITY_MARKPARITY:
+      options.c_cflag &= PARENB|PARODD|CMSPAR;
+      break;
+    case serial::PARITY_NOPARITY:
+      options.c_cflag &= ~(PARENB | PARODD);
+      break;
+    case serial::PARITY_ODDPARITY:
+      options.c_cflag &= PARENB;
+      options.c_cflag &= PARODD;
+      break;
+    case serial::PARITY_SPACEPARITY:
+      options.c_cflag &= PARENB|CMSPAR;
+      break;
+    default:
+      // TODO(sungguk): handle it.
+      break;
+  }
   options.c_lflag &= ~(ICANON | ECHO | ECHOE | ISIG);
 
   // Enable receiver and set local mode
diff --git a/chrome/browser/extensions/api/serial/serial_connection_win.cc b/chrome/browser/extensions/api/serial/serial_connection_win.cc
index 87a146d..07498ca 100644
--- a/chrome/browser/extensions/api/serial/serial_connection_win.cc
+++ b/chrome/browser/extensions/api/serial/serial_connection_win.cc
@@ -46,9 +46,38 @@ bool SerialConnection::PostOpen() {
     if (speed_found)
       dcb.BaudRate = speed;
   }
-  dcb.ByteSize = 8;
-  dcb.StopBits = ONESTOPBIT;
-  dcb.Parity = NOPARITY;
+  switch (databit_) {
+    case DATA_BIT_SEVENBIT: 
+      dcb.ByteSize = 7;
+      break;
+    case DATA_BIT_EIGHTBIT:
+      dcb.ByteSize = 8;
+      break;
+  }
+  switch (parity_) {
+    case PARITY_EVENPARITY:
+      dcb.Parity = EVENPARITY;
+      break;
+    case PARITY_MARKPARITY:
+      dcb.Parity = MARKPARITY;
+      break;
+    case PARITY_NOPARITY:
+      dcb.Parity = NOPARITY;
+      break;
+    case PARITY_ODDPARITY:
+      dcb.Parity = ODDPARITY;
+      break;
+    case PARITY_SPACEPARITY:
+      dcb.Parity = SPACEPARITY;
+  }
+  switch (stopbit_) {
+    case STOP_BIT_ONESTOPBIT:
+      dcb.StopBits = ONESTOPBIT;
+      break;
+    case STOP_BIT_TWOSTOPBIT:
+      dcb.StopBits = TWOSTOPBIT;
+      break;
+  }
   if (!SetCommState(file_, &dcb))
     return false;
 
diff --git a/chrome/common/extensions/api/serial.idl b/chrome/common/extensions/api/serial.idl
index 1df7550..2a00c5a 100644
--- a/chrome/common/extensions/api/serial.idl
+++ b/chrome/common/extensions/api/serial.idl
@@ -8,6 +8,10 @@ namespace serial {
 
   callback GetPortsCallback = void (DOMString[] ports);
 
+  enum DataBit { sevenbit, eightbit };
+  enum Parity { noparity, oddparity, evenparity, markparity, spaceparity };
+  enum StopBit { onestopbit, twostopbit };
+
   dictionary OpenOptions {
     // The requested bitrate of the connection to be opened. For compatibility
     // with the widest range of hardware, this number should match one of
@@ -15,7 +19,10 @@ namespace serial {
     // 14400, 19200, 38400, 57600, 115200. There is no guarantee, of course,
     // that the device connected to the serial port will support the requested
     // bitrate, even if the port itself supports that bitrate.
-    long bitrate;
+    long? bitrate;
+    DataBit? dataBit;
+    Parity? parityBit;
+    StopBit? stopBit;
   };
 
   dictionary OpenInfo {
